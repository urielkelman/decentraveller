{
  "language": "Solidity",
  "sources": {
    "contracts/Decentraveller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Decentraveller {\n    uint256 public lastPlaceId = 0;\n\n    enum TourismField {\n        GASTRONOMY,\n        ENTERTAINMENT,\n        HISTORICAL\n    }\n\n    struct Place {\n        TourismField TourismField;\n        string latitude;\n        string longitude;\n        uint256 placeId;\n        string[] reviews;\n    }\n\n    mapping(string => Place) public places;\n\n    function addPlace(\n        string memory _name,\n        TourismField _tourismField,\n        string memory _latitude,\n        string memory _longitude\n    ) public {\n        lastPlaceId += 1;\n        places[_name] = Place(\n            _tourismField,\n            _latitude,\n            _longitude,\n            lastPlaceId,\n            new string[](0)\n        );\n    }\n\n    function addReview(string memory _placeName, string memory _review) public {\n        require(\n            places[_placeName].placeId != 0,\n            \"Review must be added to an existent place\"\n        );\n        places[_placeName].reviews.push(_review);\n    }\n\n    function getReviews(string memory _placeName)\n        external\n        view\n        returns (string[] memory)\n    {\n        require(\n            places[_placeName].placeId != 0,\n            \"Review must be added to an existent place\"\n        );\n        return places[_placeName].reviews;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}