{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_placesFactory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_latitude",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_longitude",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_physicalAddress",
          "type": "string"
        },
        {
          "internalType": "enum DecentravellerPlaceCategory",
          "name": "category",
          "type": "uint8"
        }
      ],
      "name": "addPlace",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_placeId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_review",
          "type": "string"
        }
      ],
      "name": "addReview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_placeId",
          "type": "uint256"
        }
      ],
      "name": "getReviews",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPlaceId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "placesAddressByPlaceId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x801a13a8641b2cbf8ddaefacd89038f6d7d7928ac0c4bb891ab639c381a499c0",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "911778",
    "logsBloom": "0x
    "blockHash": "0x65dbfd86805c2c60ae86806500ea889d134f54adde067ccd27255e7721da86f0",
    "transactionHash": "0x801a13a8641b2cbf8ddaefacd89038f6d7d7928ac0c4bb891ab639c381a499c0",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "911778",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "b3aeab3c2ef0e9c6c105b66a769523b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_placesFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_latitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_longitude\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_physicalAddress\",\"type\":\"string\"},{\"internalType\":\"enum DecentravellerPlaceCategory\",\"name\":\"category\",\"type\":\"uint8\"}],\"name\":\"addPlace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_placeId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_review\",\"type\":\"string\"}],\"name\":\"addReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_placeId\",\"type\":\"uint256\"}],\"name\":\"getReviews\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPlaceId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"placesAddressByPlaceId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Decentraveller.sol\":\"Decentraveller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create(0, ptr, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\\n            instance := create2(0, ptr, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\\n            mstore(add(ptr, 0x4c), salt)\\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\\n            predicted := keccak256(add(ptr, 0x37), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xae614c6b103b743c62e9544632f7ef4fc8950de4e9c783d2e765a3b86701dda3\",\"license\":\"MIT\"},\"contracts/Decentraveller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n// Uncomment this line to use console.log\\n// import \\\"hardhat/console.sol\\\";\\n\\nimport \\\"./DecentravellerPlace.sol\\\";\\nimport \\\"./DecentravellerPlaceCategory.sol\\\";\\nimport \\\"./DecentravellerPlaceCloneFactory.sol\\\";\\n\\ncontract Decentraveller {\\n    uint256 public lastPlaceId;\\n    DecentravellerPlaceCloneFactory placeFactory;\\n\\n    constructor(address _placesFactory) {\\n        placeFactory = DecentravellerPlaceCloneFactory(_placesFactory);\\n        lastPlaceId = 0;\\n    }\\n\\n    mapping(uint256 => address) public placesAddressByPlaceId;\\n\\n    function addPlace(\\n        string memory _name,\\n        string memory _latitude,\\n        string memory _longitude,\\n        string memory _physicalAddress,\\n        DecentravellerPlaceCategory category\\n    ) public {\\n        lastPlaceId += 1;\\n        placesAddressByPlaceId[lastPlaceId] = placeFactory.createNewPlace(\\n            lastPlaceId,\\n            _name,\\n            _latitude,\\n            _longitude,\\n            _physicalAddress,\\n            category,\\n            msg.sender\\n        );\\n    }\\n\\n    function addReview(uint256 _placeId, string memory _review) public {\\n        require(\\n            placesAddressByPlaceId[_placeId] != address(0),\\n            \\\"Review must be added to an existent place\\\"\\n        );\\n        DecentravellerPlace(placesAddressByPlaceId[_placeId]).addReview(\\n            _review\\n        );\\n    }\\n\\n    function getReviews(\\n        uint256 _placeId\\n    ) external view returns (string[] memory) {\\n        require(\\n            placesAddressByPlaceId[_placeId] != address(0),\\n            \\\"Place does not exist\\\"\\n        );\\n        return\\n            DecentravellerPlace(placesAddressByPlaceId[_placeId]).getReviews();\\n    }\\n}\\n\",\"keccak256\":\"0xd3fbf77c976e7b535aa0b8ded98a4ee830612f7998377f4d69406c3f3b513fdd\",\"license\":\"MIT\"},\"contracts/DecentravellerPlace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./Decentraveller.sol\\\";\\nimport \\\"./DecentravellerPlaceCategory.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract DecentravellerPlace is Initializable {\\n    uint256 public placeId;\\n    string public name;\\n    string public latitude;\\n    string public longitude;\\n    string public physicalAddress;\\n    DecentravellerPlaceCategory public category;\\n    address public placeCreator;\\n    string[] public reviews;\\n\\n    function initialize(\\n        uint256 _placeId,\\n        string memory _name,\\n        string memory _latitude,\\n        string memory _longitude,\\n        string memory _physicalAddress,\\n        DecentravellerPlaceCategory _category,\\n        address _placeCreator\\n    ) public initializer {\\n        placeId = _placeId;\\n        name = _name;\\n        latitude = _latitude;\\n        longitude = _longitude;\\n        physicalAddress = _physicalAddress;\\n        category = _category;\\n        placeCreator = _placeCreator;\\n    }\\n\\n    function addReview(string memory _review) public {\\n        reviews.push(_review);\\n    }\\n\\n    function getReviews() external view returns (string[] memory) {\\n        return reviews;\\n    }\\n}\\n\",\"keccak256\":\"0x0b739fea8e3fd0f8525f37bf8583d46e3439270cadc789a0a56cbd3eb66a78b2\",\"license\":\"MIT\"},\"contracts/DecentravellerPlaceCategory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nenum DecentravellerPlaceCategory {\\n    GASTRONOMY,\\n    ACCOMODATION,\\n    ENTERTAINMENT\\n}\\n\",\"keccak256\":\"0xd326d4d40e8de054aa42f92e34c1ec6625ea9d1eeac189b48740e94a3b6bfbe2\",\"license\":\"MIT\"},\"contracts/DecentravellerPlaceCloneFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"./DecentravellerPlace.sol\\\";\\nimport \\\"./DecentravellerPlaceCategory.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract DecentravellerPlaceCloneFactory {\\n    address immutable decentravellerPlaceImplementation;\\n\\n    event NewPlace(\\n        uint256 indexed id,\\n        address indexed placeCreator,\\n        string placeName,\\n        string physicalAddress,\\n        DecentravellerPlaceCategory category,\\n        string latitude,\\n        string longitude\\n    );\\n\\n    constructor(address _decentravellerPlaceImplementation) {\\n        decentravellerPlaceImplementation = _decentravellerPlaceImplementation;\\n    }\\n\\n    function createNewPlace(\\n        uint256 _placeId,\\n        string memory _name,\\n        string memory _latitude,\\n        string memory _longitude,\\n        string memory _physicalAddress,\\n        DecentravellerPlaceCategory _category,\\n        address _placeCreator\\n    ) external returns (address) {\\n        address placeCloneAddress = Clones.clone(\\n            decentravellerPlaceImplementation\\n        );\\n        DecentravellerPlace(placeCloneAddress).initialize(\\n            _placeId,\\n            _name,\\n            _latitude,\\n            _longitude,\\n            _physicalAddress,\\n            _category,\\n            _placeCreator\\n        );\\n\\n        emit NewPlace(\\n            _placeId,\\n            _placeCreator,\\n            _name,\\n            _physicalAddress,\\n            _category,\\n            _latitude,\\n            _longitude\\n        );\\n        return placeCloneAddress;\\n    }\\n}\\n\",\"keccak256\":\"0x437426bd10577e8378b84109fead267d3a613035d209c830b2e5166ee8bc9dd9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516200103038038062001030833981810160405281019061003491906100e5565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000808190555050610112565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b282610087565b9050919050565b6100c2816100a7565b81146100cd57600080fd5b50565b6000815190506100df816100b9565b92915050565b6000602082840312156100fb576100fa610082565b5b6000610109848285016100d0565b91505092915050565b610f0e80620001226000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063283d7a9c1461005c5780635bb0c5d61461007a5780639d4a225514610096578063b9d8af89146100c6578063df3d5fd6146100e2575b600080fd5b610064610112565b6040516100719190610518565b60405180910390f35b610094600480360381019061008f91906106b9565b610118565b005b6100b060048036038101906100ab9190610715565b61025c565b6040516100bd9190610883565b60405180910390f35b6100e060048036038101906100db91906108ca565b6103ae565b005b6100fc60048036038101906100f79190610715565b6104cc565b60405161010991906109f6565b60405180910390f35b60005481565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b190610a94565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348db8fa9826040518263ffffffff1660e01b81526004016102269190610aed565b600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f790610b5b565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b1e13246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103a79190610cd1565b9050919050565b60016000808282546103c09190610d49565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355ffbacc6000548787878787336040518863ffffffff1660e01b81526004016104309796959493929190610df4565b6020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610eab565b600260008054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b610512816104ff565b82525050565b600060208201905061052d6000830184610509565b92915050565b6000604051905090565b600080fd5b600080fd5b610550816104ff565b811461055b57600080fd5b50565b60008135905061056d81610547565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105c68261057d565b810181811067ffffffffffffffff821117156105e5576105e461058e565b5b80604052505050565b60006105f8610533565b905061060482826105bd565b919050565b600067ffffffffffffffff8211156106245761062361058e565b5b61062d8261057d565b9050602081019050919050565b82818337600083830152505050565b600061065c61065784610609565b6105ee565b90508281526020810184848401111561067857610677610578565b5b61068384828561063a565b509392505050565b600082601f8301126106a05761069f610573565b5b81356106b0848260208601610649565b91505092915050565b600080604083850312156106d0576106cf61053d565b5b60006106de8582860161055e565b925050602083013567ffffffffffffffff8111156106ff576106fe610542565b5b61070b8582860161068b565b9150509250929050565b60006020828403121561072b5761072a61053d565b5b60006107398482850161055e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107a857808201518184015260208101905061078d565b60008484015250505050565b60006107bf8261076e565b6107c98185610779565b93506107d981856020860161078a565b6107e28161057d565b840191505092915050565b60006107f983836107b4565b905092915050565b6000602082019050919050565b600061081982610742565b610823818561074d565b9350836020820285016108358561075e565b8060005b85811015610871578484038952815161085285826107ed565b945061085d83610801565b925060208a01995050600181019050610839565b50829750879550505050505092915050565b6000602082019050818103600083015261089d818461080e565b905092915050565b600381106108b257600080fd5b50565b6000813590506108c4816108a5565b92915050565b600080600080600060a086880312156108e6576108e561053d565b5b600086013567ffffffffffffffff81111561090457610903610542565b5b6109108882890161068b565b955050602086013567ffffffffffffffff81111561093157610930610542565b5b61093d8882890161068b565b945050604086013567ffffffffffffffff81111561095e5761095d610542565b5b61096a8882890161068b565b935050606086013567ffffffffffffffff81111561098b5761098a610542565b5b6109978882890161068b565b92505060806109a8888289016108b5565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e0826109b5565b9050919050565b6109f0816109d5565b82525050565b6000602082019050610a0b60008301846109e7565b92915050565b600082825260208201905092915050565b7f526576696577206d75737420626520616464656420746f20616e20657869737460008201527f656e7420706c6163650000000000000000000000000000000000000000000000602082015250565b6000610a7e602983610a11565b9150610a8982610a22565b604082019050919050565b60006020820190508181036000830152610aad81610a71565b9050919050565b6000610abf8261076e565b610ac98185610a11565b9350610ad981856020860161078a565b610ae28161057d565b840191505092915050565b60006020820190508181036000830152610b078184610ab4565b905092915050565b7f506c61636520646f6573206e6f74206578697374000000000000000000000000600082015250565b6000610b45601483610a11565b9150610b5082610b0f565b602082019050919050565b60006020820190508181036000830152610b7481610b38565b9050919050565b600067ffffffffffffffff821115610b9657610b9561058e565b5b602082029050602081019050919050565b600080fd5b6000610bbf610bba84610609565b6105ee565b905082815260208101848484011115610bdb57610bda610578565b5b610be684828561078a565b509392505050565b600082601f830112610c0357610c02610573565b5b8151610c13848260208601610bac565b91505092915050565b6000610c2f610c2a84610b7b565b6105ee565b90508083825260208201905060208402830185811115610c5257610c51610ba7565b5b835b81811015610c9957805167ffffffffffffffff811115610c7757610c76610573565b5b808601610c848982610bee565b85526020850194505050602081019050610c54565b5050509392505050565b600082601f830112610cb857610cb7610573565b5b8151610cc8848260208601610c1c565b91505092915050565b600060208284031215610ce757610ce661053d565b5b600082015167ffffffffffffffff811115610d0557610d04610542565b5b610d1184828501610ca3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d54826104ff565b9150610d5f836104ff565b9250828201905080821115610d7757610d76610d1a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610dbd57610dbc610d7d565b5b50565b6000819050610dce82610dac565b919050565b6000610dde82610dc0565b9050919050565b610dee81610dd3565b82525050565b600060e082019050610e09600083018a610509565b8181036020830152610e1b8189610ab4565b90508181036040830152610e2f8188610ab4565b90508181036060830152610e438187610ab4565b90508181036080830152610e578186610ab4565b9050610e6660a0830185610de5565b610e7360c08301846109e7565b98975050505050505050565b610e88816109d5565b8114610e9357600080fd5b50565b600081519050610ea581610e7f565b92915050565b600060208284031215610ec157610ec061053d565b5b6000610ecf84828501610e96565b9150509291505056fea264697066735822122037aa7b9695c236427c5778b1bfd7f3e48e5455bd6a394d68098768515539d0d964736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063283d7a9c1461005c5780635bb0c5d61461007a5780639d4a225514610096578063b9d8af89146100c6578063df3d5fd6146100e2575b600080fd5b610064610112565b6040516100719190610518565b60405180910390f35b610094600480360381019061008f91906106b9565b610118565b005b6100b060048036038101906100ab9190610715565b61025c565b6040516100bd9190610883565b60405180910390f35b6100e060048036038101906100db91906108ca565b6103ae565b005b6100fc60048036038101906100f79190610715565b6104cc565b60405161010991906109f6565b60405180910390f35b60005481565b600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036101ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101b190610a94565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166348db8fa9826040518263ffffffff1660e01b81526004016102269190610aed565b600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b505050505050565b6060600073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610300576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f790610b5b565b60405180910390fd5b6002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631b1e13246040518163ffffffff1660e01b8152600401600060405180830381865afa15801561037e573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906103a79190610cd1565b9050919050565b60016000808282546103c09190610d49565b92505081905550600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166355ffbacc6000548787878787336040518863ffffffff1660e01b81526004016104309796959493929190610df4565b6020604051808303816000875af115801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190610eab565b600260008054815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050505050565b60026020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000819050919050565b610512816104ff565b82525050565b600060208201905061052d6000830184610509565b92915050565b6000604051905090565b600080fd5b600080fd5b610550816104ff565b811461055b57600080fd5b50565b60008135905061056d81610547565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6105c68261057d565b810181811067ffffffffffffffff821117156105e5576105e461058e565b5b80604052505050565b60006105f8610533565b905061060482826105bd565b919050565b600067ffffffffffffffff8211156106245761062361058e565b5b61062d8261057d565b9050602081019050919050565b82818337600083830152505050565b600061065c61065784610609565b6105ee565b90508281526020810184848401111561067857610677610578565b5b61068384828561063a565b509392505050565b600082601f8301126106a05761069f610573565b5b81356106b0848260208601610649565b91505092915050565b600080604083850312156106d0576106cf61053d565b5b60006106de8582860161055e565b925050602083013567ffffffffffffffff8111156106ff576106fe610542565b5b61070b8582860161068b565b9150509250929050565b60006020828403121561072b5761072a61053d565b5b60006107398482850161055e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156107a857808201518184015260208101905061078d565b60008484015250505050565b60006107bf8261076e565b6107c98185610779565b93506107d981856020860161078a565b6107e28161057d565b840191505092915050565b60006107f983836107b4565b905092915050565b6000602082019050919050565b600061081982610742565b610823818561074d565b9350836020820285016108358561075e565b8060005b85811015610871578484038952815161085285826107ed565b945061085d83610801565b925060208a01995050600181019050610839565b50829750879550505050505092915050565b6000602082019050818103600083015261089d818461080e565b905092915050565b600381106108b257600080fd5b50565b6000813590506108c4816108a5565b92915050565b600080600080600060a086880312156108e6576108e561053d565b5b600086013567ffffffffffffffff81111561090457610903610542565b5b6109108882890161068b565b955050602086013567ffffffffffffffff81111561093157610930610542565b5b61093d8882890161068b565b945050604086013567ffffffffffffffff81111561095e5761095d610542565b5b61096a8882890161068b565b935050606086013567ffffffffffffffff81111561098b5761098a610542565b5b6109978882890161068b565b92505060806109a8888289016108b5565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e0826109b5565b9050919050565b6109f0816109d5565b82525050565b6000602082019050610a0b60008301846109e7565b92915050565b600082825260208201905092915050565b7f526576696577206d75737420626520616464656420746f20616e20657869737460008201527f656e7420706c6163650000000000000000000000000000000000000000000000602082015250565b6000610a7e602983610a11565b9150610a8982610a22565b604082019050919050565b60006020820190508181036000830152610aad81610a71565b9050919050565b6000610abf8261076e565b610ac98185610a11565b9350610ad981856020860161078a565b610ae28161057d565b840191505092915050565b60006020820190508181036000830152610b078184610ab4565b905092915050565b7f506c61636520646f6573206e6f74206578697374000000000000000000000000600082015250565b6000610b45601483610a11565b9150610b5082610b0f565b602082019050919050565b60006020820190508181036000830152610b7481610b38565b9050919050565b600067ffffffffffffffff821115610b9657610b9561058e565b5b602082029050602081019050919050565b600080fd5b6000610bbf610bba84610609565b6105ee565b905082815260208101848484011115610bdb57610bda610578565b5b610be684828561078a565b509392505050565b600082601f830112610c0357610c02610573565b5b8151610c13848260208601610bac565b91505092915050565b6000610c2f610c2a84610b7b565b6105ee565b90508083825260208201905060208402830185811115610c5257610c51610ba7565b5b835b81811015610c9957805167ffffffffffffffff811115610c7757610c76610573565b5b808601610c848982610bee565b85526020850194505050602081019050610c54565b5050509392505050565b600082601f830112610cb857610cb7610573565b5b8151610cc8848260208601610c1c565b91505092915050565b600060208284031215610ce757610ce661053d565b5b600082015167ffffffffffffffff811115610d0557610d04610542565b5b610d1184828501610ca3565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d54826104ff565b9150610d5f836104ff565b9250828201905080821115610d7757610d76610d1a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610dbd57610dbc610d7d565b5b50565b6000819050610dce82610dac565b919050565b6000610dde82610dc0565b9050919050565b610dee81610dd3565b82525050565b600060e082019050610e09600083018a610509565b8181036020830152610e1b8189610ab4565b90508181036040830152610e2f8188610ab4565b90508181036060830152610e438187610ab4565b90508181036080830152610e578186610ab4565b9050610e6660a0830185610de5565b610e7360c08301846109e7565b98975050505050505050565b610e88816109d5565b8114610e9357600080fd5b50565b600081519050610ea581610e7f565b92915050565b600060208284031215610ec157610ec061053d565b5b6000610ecf84828501610e96565b9150509291505056fea264697066735822122037aa7b9695c236427c5778b1bfd7f3e48e5455bd6a394d68098768515539d0d964736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 539,
        "contract": "contracts/Decentraveller.sol:Decentraveller",
        "label": "lastPlaceId",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 542,
        "contract": "contracts/Decentraveller.sol:Decentraveller",
        "label": "placeFactory",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(DecentravellerPlaceCloneFactory)846"
      },
      {
        "astId": 562,
        "contract": "contracts/Decentraveller.sol:Decentraveller",
        "label": "placesAddressByPlaceId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(DecentravellerPlaceCloneFactory)846": {
        "encoding": "inplace",
        "label": "contract DecentravellerPlaceCloneFactory",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}